// Generated by xsd compiler for ios/objective-c
// DO NOT CHANGE!

#import <Foundation/Foundation.h>
#import "PicoClassSchema.h"
#import "PicoPropertySchema.h"
#import "PicoConstants.h"
#import "PicoBindable.h"
#import "Trading_AbstractResponseType.h"


@class Trading_ProductSuggestionsType;
@class Trading_ExpressItemRequirementsType;
@class Trading_FeesType;

/**
 
 Returns the estimated fees that would be applicable for a new listing
 (were the item actually listed to eBay with AddItem).
 
 
 @ingroup EBayAPIInterface
*/
@interface Trading_VerifyAddItemResponseType : Trading_AbstractResponseType {

@private
    NSString *_itemID;
    Trading_FeesType *_fees;
    NSNumber *_expressListing;
    Trading_ExpressItemRequirementsType *_expressItemRequirements;
    NSString *_categoryID;
    NSString *_category2ID;
    NSMutableArray *_discountReason;
    Trading_ProductSuggestionsType *_productSuggestions;

}


/**
 
 Represents the item ID for the new listing. VerifyAddItem does not
 actually list an item, so 0 is returned instead of a normal item ID.
 <br><br>
 <span class="tablenote"><b>Note:</b>
 Although we represent item IDs as strings in the schema, we recommend you store
 them as 64-bit signed integers. If you choose to store item IDs as strings,
 allocate at least 19 characters (assuming decimal digits are used) to hold them.
 eBay will increase the size of IDs over time. Your code should be prepared to
 handle IDs of up to 19 digits. For more information about item IDs, see
 <a href=
 "http://ebay.custhelp.com/cgi-bin/ebay.cfg/php/enduser/std_adp.php?p_faqid=468">
 Common FAQs on eBay Item IDs and other eBay IDs</a> in the Knowledge Base.
 </span>
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *itemID;

/**
 
 Child Fee containers provide the listing feature names, fees, and possible discounts
 for the new item listing. The fees do not include the Final Value Fee (FVF), which
 cannot be determined until an item is sold.
 <br />
 <br />
 There is no guarantee that a PromotionalDiscount returned with VerifyAddItem will
 be realized when the seller uses AddItem to list the same item. This is the result
 of the timing of certain promotions.
 <br />
 <br />
 <span class="tablenote"><strong>Note:</strong>
 Starting with version 619, the behavior of VerifyAddItem changed to match that of
 AddItem. With a request version of 619 or higher, the value of Fees.Fee.Fee
 for VerifyAddItem represents the actual cost of the respective feature, with any
 discounts subtracted from the posted feature price. With a request version lower
 than 619, VerifyAddItem returns the full price of the feature in the Fee element,
 regardless of whether or not a discount was applied.
 </span>
 
 
 type : class Trading_FeesType
*/
@property (nonatomic, retain) Trading_FeesType *fees;

/**
 
 Indicates whether the item would be listed on eBay Express.
 See ExpressItemRequirements for hints about why this
 value is true or false for a given item.
 
 
 type : NSNumber, wrapper for primitive bool
*/
@property (nonatomic, retain) NSNumber *expressListing;

/**
 
 Contains details about why an item does or doesn't
 qualify as an eBay Express listing. Only returned when
 IncludeExpressRequirements is true the request.
 <br>
 <br>
 The item requirements are assessed in this order:<br>
 - SellerExpressEligible<br>
 - ExpressOptOut<br>
 - ExpressApproved<br>
 - All other settings
 
 
 type : class Trading_ExpressItemRequirementsType
*/
@property (nonatomic, retain) Trading_ExpressItemRequirementsType *expressItemRequirements;

/**
 
 ID of the primary category in which the item would be listed.
 Only returned if you set Item.CategoryMappingAllowed to true in the request
 and the ID you passed in PrimaryCategory was mapped to a new ID by eBay.
 If the primary category has not changed or it has expired with no replacement,
 CategoryID does not return a value.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *categoryID;

/**
 
 ID of the secondary category in which the item would be listed.
 Only returned if you set Item.CategoryMappingAllowed to true in the request
 and the ID you passed in SecondaryCategory was mapped to a new ID by eBay.
 If the secondary category has not changed or it has expired with no replacement,
 Category2ID does not return a value.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *category2ID;

/**
 
 The nature of the discount, if a discount would have applied
 had this actually been listed at this time.
 
 
 entry type : string constant in Trading_DiscountReasonCodeType.h
*/

@property (nonatomic, retain) NSMutableArray *discountReason;

/**
 
 Provides a list of products recommended by eBay which match the item information
 provided by the seller.
 Not applicable to Half.com.
 
 
 type : class Trading_ProductSuggestionsType
*/
@property (nonatomic, retain) Trading_ProductSuggestionsType *productSuggestions;


@end
