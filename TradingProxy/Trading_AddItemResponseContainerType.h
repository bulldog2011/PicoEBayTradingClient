// Generated by xsd compiler for ios/objective-c
// DO NOT CHANGE!

#import <Foundation/Foundation.h>
#import "PicoClassSchema.h"
#import "PicoPropertySchema.h"
#import "PicoConstants.h"
#import "PicoBindable.h"


@class Trading_ErrorType;
@class Trading_FeesType;

/**
 
 This container has all of the resulting information from an AddItems call. There will be one
 container per container specified in the request.
 
 
 @ingroup EBayAPIInterface
*/
@interface Trading_AddItemResponseContainerType : NSObject <PicoBindable> {

@private
    NSString *_itemID;
    NSDate *_startTime;
    NSDate *_endTime;
    Trading_FeesType *_fees;
    NSString *_categoryID;
    NSString *_category2ID;
    NSString *_correlationID;
    NSMutableArray *_errors;
    NSString *_message;
    NSMutableArray *_discountReason;
    NSMutableArray *_any;

}


/**
 
 Unique item ID for the new listing.
 Also applicable to Half.com.
 <br><br>
 <span class="tablenote"><b>Note:</b> Although we
 represent item IDs as strings in the schema, we recommend you store them
 as 64-bit signed integers. If you choose to store item IDs as strings,
 allocate at least 19 characters (assuming decimal digits are used) to hold
 them. eBay will increase the size of IDs over time. Your code should be
 prepared to handle IDs of up to 19 digits. For more information about item
 IDs, see <a
 href="http://ebay.custhelp.com/cgi-bin/ebay.cfg/php/enduser/std_adp.php?p_faqid=468">Common
 FAQs on eBay Item IDs and other eBay IDs</a> in the Knowledge
 Base.</span>
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *itemID;

/**
 
 Starting date and time for the new listing.
 Also returned for Half.com (for Half.com, the start time is always the time the item was listed).
 
 
 type : NSDate, wrapper for primitive date
*/
@property (nonatomic, retain) NSDate *startTime;

/**
 
 Date and time when the new listing ends. This is the starting time
 plus the listing duration.
 Also returned for Half.com, but for Half.com the actual end time is GTC
 (not the end time returned in the response).
 
 
 type : NSDate, wrapper for primitive date
*/
@property (nonatomic, retain) NSDate *endTime;

/**
 
 Child elements contain the estimated listing fees for the new item listing.
 The fees do not include the Final Value Fee (FVF), which cannot be determined
 until an item is sold.
 Also returned for Half.com, but the values are not applicable to Half.com listings.
 
 
 type : class Trading_FeesType
*/
@property (nonatomic, retain) Trading_FeesType *fees;

/**
 
 ID of the primary category in which the item was listed.
 Only returned if you set Item.CategoryMappingAllowed to true in the request
 and the ID you passed in PrimaryCategory was mapped to a new ID by eBay.
 If the primary category has not changed or it has expired with no replacement,
 CategoryID does not return a value.
 Not applicable to Half.com.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *categoryID;

/**
 
 ID of the secondary category in which the item was listed.
 Only returned if you set Item.CategoryMappingAllowed to true in the request
 and the ID you passed in SecondaryCategory was mapped to a new ID by eBay.
 If the secondary category has not changed or it has expired with no replacement,
 Category2ID does not return a value.
 Not applicable to Half.com.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *category2ID;

/**
 
 Most Trading API calls support a <b>MessageID</b> element in the request
 and a <b>CorrelationID</b> element in the response. With
 <b>AddItems</b>, a unique <b>MessageID</b> value is required for
 each <b>AddItemRequestContainer<b> container that is used in the request. The
 <b>CorrelationID</b> value returned under each
 <b>AddItemResponseContainer</b> container is used to correlate each
 item request container with its corresponding response container. The same <b>MessageID</b> value that you pass into a request will
 be returned in the <b>CorrelationID</b> field in the response.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *correlationID;

/**
 
 A list of application-level errors or warnings (if any) that were raised
 when eBay processed the request. <br>
 <br>
 Application-level errors occur due to
 problems with business-level data on the client side or on the eBay
 server side. For example, an error would occur if the request contains
 an invalid combination of fields, or it is missing a required field,
 or the value of the field is not recognized. An error could also occur
 if eBay encountered a problem in our internal business logic while
 processing the request.<br>
 <br>
 Only returned if there were warnings or errors.
 
 
 entry type : class Trading_ErrorType
*/

@property (nonatomic, retain) NSMutableArray *errors;

/**
 
 Supplemental information from eBay, if applicable. May elaborate on errors or
 provide useful hints for the seller. This data can accompany the call's normal
 data result set or a result set that contains only errors. The string can
 return HTML, including TABLE, IMG, and HREF elements. In this case, an HTML-
 based application should be able to include the HTML as-is in the HTML page
 that displays the results. A non-HTML application would need to parse the HTML
 and convert the table elements and image references into UI elements
 particular to the programming language used. Because this data is returned as
 a string, the HTML markup elements are escaped with character entity
 references (e.g.,&lt;table&gt;&lt;tr&gt;...). See the
 appendices in the eBay Web Services guide for general information about string
 data types.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *message;

/**
 
 The nature of the discount, if a discount applied.
 
 
 entry type : string constant in Trading_DiscountReasonCodeType.h
*/

@property (nonatomic, retain) NSMutableArray *discountReason;

/**
 (public property)
 
 entry type : PicoAnyElement, wrapper for primitive anyelement
*/

@property (nonatomic, retain) NSMutableArray *any;


@end
