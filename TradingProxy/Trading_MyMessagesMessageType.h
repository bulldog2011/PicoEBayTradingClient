// Generated by xsd compiler for ios/objective-c
// DO NOT CHANGE!

#import <Foundation/Foundation.h>
#import "PicoClassSchema.h"
#import "PicoPropertySchema.h"
#import "PicoConstants.h"
#import "PicoBindable.h"


@class Trading_MyMessagesResponseDetailsType;
@class Trading_MyMessagesFolderType;
@class Trading_MyMessagesForwardDetailsType;

/**
 
 Contains the message information for each message specified in
 MessageIDs. The amount and type of information returned varies based on
 the requested detail level.
 
 
 @ingroup EBayAPIInterface
*/
@interface Trading_MyMessagesMessageType : NSObject <PicoBindable> {

@private
    NSString *_sender;
    NSString *_recipientUserID;
    NSString *_sendToName;
    NSString *_subject;
    NSString *_messageID;
    NSString *_externalMessageID;
    NSString *_contentType;
    NSString *_text;
    NSNumber *_flagged;
    NSNumber *_read;
    NSDate *_creationDate;
    NSDate *_receiveDate;
    NSDate *_expirationDate;
    NSString *_itemID;
    Trading_MyMessagesResponseDetailsType *_responseDetails;
    Trading_MyMessagesForwardDetailsType *_forwardDetails;
    Trading_MyMessagesFolderType *_folder;
    NSString *_content;
    NSString *_messageType;
    NSString *_listingStatus;
    NSString *_questionType;
    NSNumber *_replied;
    NSNumber *_highPriority;
    NSDate *_itemEndTime;
    NSString *_itemTitle;
    NSMutableArray *_any;

}


/**
 
 The display name of the eBay user that sent the message.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *sender;

/**
 
 The displayable user ID of the recipient.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *recipientUserID;

/**
 
 The displayable name of the user or eBay
 application to which the message is sent. Only
 returned for M2M, and if a value exists.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *sendToName;

/**
 
 The subject of the message.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *subject;

/**
 
 An ID that uniquely identifies a message for a given user.
 <br/>
 <br/>
 This value is not the same as the value used for the
 GetMemberMessages MessageID. Use the GetMemberMessages value
 (used as the GetMyMessages ExternalID) instead.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *messageID;

/**
 
 An ID used by an external application to uniquely identify a
 message. Returned only when specified by the external
 application on message creation.
 <br><br>
 This value is equivalent to the value used for MessageID in
 GetMemberMessages.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *externalMessageID;

/**
 
 The content type of the body text. The three acceptable values
 are "TEXT", "HTML",  and "XML" (case sensitive).
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *contentType;

/**
 
 This field contains message content, and
 can contain a threaded message.
 This field can contain plain text or HTML,
 depending on the format of the original message.
 The API does not check the email-format preferences
 in My Messages on the eBay Web site.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *text;

/**
 
 When the Flagged field is true,
 it means the message is displayed with a flag in the seller's
 My Messages mailbox on eBay.
 It is strongly recommended that the seller act on the message by the
 specified date (or within 60 days, if not specified).
 
 
 type : NSNumber, wrapper for primitive bool
*/
@property (nonatomic, retain) NSNumber *flagged;

/**
 
 Whether or not a message has been viewed by a given user. Note that retrieving
 a message with the API does not mark it as read.
 
 
 type : NSNumber, wrapper for primitive bool
*/
@property (nonatomic, retain) NSNumber *read;

/**
 
 The date and time that a message was created by the sender.
 
 
 type : NSDate, wrapper for primitive date
*/
@property (nonatomic, retain) NSDate *creationDate;

/**
 
 The date and time that a message was received by My Messages and stored in a
 database for the recipient.
 
 
 type : NSDate, wrapper for primitive date
*/
@property (nonatomic, retain) NSDate *receiveDate;

/**
 
 The date and time at which a message expires.
 
 
 type : NSDate, wrapper for primitive date
*/
@property (nonatomic, retain) NSDate *expirationDate;

/**
 
 The unique item ID. Not returned
 for messages that haven't been associated with a specific item.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *itemID;

/**
 
 Details relating to the response to a message.
 
 
 type : class Trading_MyMessagesResponseDetailsType
*/
@property (nonatomic, retain) Trading_MyMessagesResponseDetailsType *responseDetails;

/**
 
 Details relating to the forwarding of a
 message. Only returned if the message is
 forwarded.
 
 
 type : class Trading_MyMessagesForwardDetailsType
*/
@property (nonatomic, retain) Trading_MyMessagesForwardDetailsType *forwardDetails;

/**
 
 Details relating to a My Messages folder.
 
 
 type : class Trading_MyMessagesFolderType
*/
@property (nonatomic, retain) Trading_MyMessagesFolderType *folder;

/**
 
 The message body in plain text format. The message body is displayed in plain text
 even if the eBay user's Preferred Email Format preference on My eBay is set to HTML.
 Graphics and text formatting are dropped if the eBay user's preference is set to
 HTML.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *content;

/**
 
 Currently available on the US site. Specifies the type of message being retrieved
 through GetMyMessages.
 
 
 type: string constant in Trading_MessageTypeCodeType.h
*/
@property (nonatomic, retain) NSString *messageType;

/**
 
 Specifies an active or ended listing's status in eBay's processing workflow.
 If a listing ends with a sale (or sales), eBay needs to update the sale
 details (e.g., total price and buyer/high bidder) and the final value fee.
 This processing can take several minutes. If you retrieve a sold item and no
 details about the buyer/high bidder are returned or no final value fee is
 available, use this listing status information to determine whether eBay has
 finished processing the listing.
 <br><br> <span class="tablenote"><b>Note:</b>
 For GetMyMessages, the listing status reflects the status of the listing at the time
 the question was created. The listing status for this call must not match the listing
 status returned by other calls (such as GetItemTransactions). This is returned only if
 Messages.Message.MessageType is AskSellerQuestion. This tag is no longer returned
 in the Sandbox environment.
 </span>
 
 
 type: string constant in Trading_ListingStatusCodeType.h
*/
@property (nonatomic, retain) NSString *listingStatus;

/**
 
 Currently available on the US site. Specifies the context of the question.
 Corresponds to the message subject. Applies if Messages.Message.MessageType is
 
 
 type: string constant in Trading_QuestionTypeCodeType.h
*/
@property (nonatomic, retain) NSString *questionType;

/**
 
 Whether or not a message has been replied.
 
 
 type : NSNumber, wrapper for primitive bool
*/
@property (nonatomic, retain) NSNumber *replied;

/**
 
 Set this boolean to true to mark the message as a high-priority message.
 
 
 type : NSNumber, wrapper for primitive bool
*/
@property (nonatomic, retain) NSNumber *highPriority;

/**
 
 The  date and time for the ended item
 
 
 type : NSDate, wrapper for primitive date
*/
@property (nonatomic, retain) NSDate *itemEndTime;

/**
 
 The title of the item listing.
 <br><br>
 <span class="tablenote"><b>Note:</b>
 The maximum length of an eBay Item Title is increasing to 80 characters in
 Version 735.
 </span>
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *itemTitle;

/**
 (public property)
 
 entry type : PicoAnyElement, wrapper for primitive anyelement
*/

@property (nonatomic, retain) NSMutableArray *any;


@end
